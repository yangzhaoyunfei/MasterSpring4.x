<?xml version="1.0" encoding="UTF-8" ?>

<!--配置(装配)DAO的Spring配置文件-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 扫描com.smart.dao包下所有标注@Repository的DAO组件 -->
    <context:component-scan base-package="com.smart.dao"/>

    <!--引入了一个外部定义的JDBC连接的配置文件/属性文件  路径-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--定义一个数据源,DBCP（DataBase Connection Pool）数据库连接池，是java数据库连接池的一种，由Apache开发，通过数据库连接池，可以让程序自动管理数据库连接的释放和断开。-->
    <bean id="dataSource"
          class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close"
          p:driverClassName="${jdbc.driverClassName}"
          p:url="${jdbc.url}"
          p:username="${jdbc.username}"
          p:password="${jdbc.password}"/>

    <!--定义hibernate session工厂-->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/><!--指定数据源-->

        <!--扫描基于JPA注解的PO类目录-->
        <property name="packagesToScan">
            <list>
                <value>com.smart.domain</value>
            </list>
        </property>

        <!--指定hibernate属性信息-->
        <property name="hibernateProperties">
            <props>

                <!--指定数据库方言为mysql-->
                <prop key="hibernate.dialect">
                    org.hibernate.dialect.MySQLDialect
                </prop>

                <!--数据库操作时,显示sql,方便开发时调试,部署是应设置为false-->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop><!--启用二级缓存-->
                <prop key="hibernate.cache.region.factory_class"><!--指定EHCache缓存的二级缓存实现类-->
                    org.hibernate.cache.ehcache.EhCacheRegionFactory
                </prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
            </props>
        </property>
    </bean>

    <!--定义hibernate模板类,是Spring提供的简化hibernate API调用的模板类-->
    <bean id="hibernateTemplate"
          class="org.springframework.orm.hibernate4.HibernateTemplate"
          p:sessionFactory-ref="sessionFactory"/>

    <!--事务管理类-->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="create*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="reg*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:advisor id="managerTx" advice-ref="txAdvice" pointcut="execution(* com.smart.*.*(..)))" order="1"/>
    </aop:config>
</beans>